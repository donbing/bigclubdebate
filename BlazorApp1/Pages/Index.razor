@page "/"
@using ConsoleApp1
@using BlazorApp1.Pages
@using BlazorApp1.Data
@inject WeatherForecastService ForecastService

@if (div1 == default)
{
    <p><em>Loading...</em></p>
}
else
{
    <section class="masthead fw-block" style="margin-top: 82px;">
        <div class="container">
            <p>a statistics website to determine, once and for all who is the bigger club</p>
            <br/>
            <h1>
                <select id="team1Select" @bind="team1Name">
                    @foreach (var team in Teams.Except(new[] { team2 }).ToList())
                    {
                        <option value="@team.MainName">@team.SlangName</option>
                    }
                </select>
                <span>VS</span>
                <select id="team2Select" @bind="team2Name">
                    @foreach (var team in Teams.Except(new[] { team1 }).ToList())
                    {
                        <option value="@team.MainName" >@team.SlangName</option>
                    }
                </select>
            </h1>
            <img class="main-img team1" src="images/@team1.ImageName" alt="@team1.MainName Logo" />
            <img class="main-img team2" src="images/@team2.ImageName" alt="@team2.MainName Logo" />
            <p class="tagline">@tagLine</p>
        </div>
    </section>

    <StatsSection SectionName="Head to Head" Expandable="false">
        <GameResults Team1="head2head.Item1" Team2="head2head.Item2"></GameResults>
    </StatsSection>

    <StatsSection SectionName="Division 1 / Premiership">
        <CompetitionResults Team1="div1.Item1" Team2="div1.Item2">
            @*<ul class="middle_opts">
                <li><a title="Players" href="#playersModal"><img width="40px" src="images/player.png" /><div class="extraStats">foo</div></a></li>
                <li><a title="League Positions"><img width="40px" src="images/graph.png" title="League Positions" /></a></li>
                <li><a title="Transfers"><img width="40px" src="images/transfer.png" title="Transfers" /></a></li>
            </ul>*@
        </CompetitionResults>
        <GameResults Team1="div1.Item1" Team2="div1.Item2"></GameResults>
        <GoalResults Team1="div1.Item1" Team2="div1.Item2"></GoalResults>
    </StatsSection>

    <StatsSection SectionName="FA Cup">
        <CompetitionResults Team1="faCup.Item1" Team2="faCup.Item2"></CompetitionResults>
        <GameResults Team1="faCup.Item1" Team2="faCup.Item2"></GameResults>
        <GoalResults Team1="faCup.Item1" Team2="faCup.Item2"></GoalResults>
    </StatsSection>

    <StatsSection SectionName="League Cup">
        <CompetitionResults Team1="leagueCup.Item1" Team2="leagueCup.Item2"></CompetitionResults>
        <GameResults Team1="leagueCup.Item1" Team2="leagueCup.Item2"></GameResults>
        <GoalResults Team1="leagueCup.Item1" Team2="leagueCup.Item2"></GoalResults>
    </StatsSection>
}

@code {

    string t1, t2;
    string team1Name { get => t1; set{ t1 = value; LoadData(); } }
    string team2Name { get => t2; set{ t2 = value; LoadData(); } }

    TeamName team1;
    TeamName team2;
    TeamName team5 = new TeamName(new[] { "Sheffield United FC", "Blades", "Sheffield Utd", "Sheffield United" }, "utd.png");
    TeamName team6 = new TeamName(new[] { "Sheffield Wednesday FC", "Owls", "Sheffield Wed", "Sheffield Wednesday" }, "wed.png");
    TeamName team3 = new TeamName(new[] { "Leeds United FC", "Leeds", "Leeds United", "Leeds Utd" }, "leeds.png");
    TeamName team4 = new TeamName(new[] { "Manchester United FC", "Red Devils", "Manchester United", "Manchester Utd", "Man Utd" }, "manu.png");


    TeamName[] Teams => new[] { team5, team6, team3, team4 };
    string tagLine = "The steel city derby";

    (TeamStats, TeamStats) faCup { get; set; }
    (TeamStats, TeamStats) div1 { get; set; }
    (TeamStats, TeamStats) head2head { get; set; }
    (TeamStats, TeamStats) leagueCup { get; set; }

    int divisionNumber = 1;

    protected override async Task OnInitializedAsync()
    {
        team1 = team5;
        team1Name = team1.MainName;
        team2 = team6;
        team2Name = team2.MainName;
        await LoadData();
    }

    async Task LoadData() {
        team1 = Teams.SingleOrDefault(x => x.MainName == team1Name);
        team2 = Teams.SingleOrDefault(x => x.MainName == team2Name);
        div1 = await ForecastService.GetDivision(divisionNumber, team1, team2);
        head2head = await ForecastService.HeadToHead(team1, team2);
        faCup = await ForecastService.FaCup(team1, team2);
        leagueCup = await ForecastService.LeagueCup(team1, team2);
    }

}
