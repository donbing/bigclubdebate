@page "/"

@using BigClubDebate.Data
@using BigClubDebate.Data.Model.DataTypes
@using BigClubDebate.Web.Data

@inject WittyTagLineGenerator TagGenerator
@inject IJSRuntime JsRuntime

@if (Team1 == null || Team2== null)
{
    <p><em>Loading...</em></p>
}
else
{
    <section class="masthead fw-block" style="margin-top: 82px;">
        <div class="container">
            <p>a statistics website to determine, once and for all who is the bigger club</p>
            <br />
            <h1>
                <select id="team1Select" @bind="Team1Name">
                    @foreach (var team in teams.ToList())
                    {
                        <option value="@team.MainName" disabled="@(Team2Name == team.MainName)">@team.NickName</option>
                    }
                </select>
                <span>VS</span>
                <select id="team2Select" @bind="Team2Name">
                    @foreach (var team in teams.ToList())
                    {
                        <option value="@team.MainName" disabled="@(Team1Name == team.MainName)">@team.NickName</option>
                    }
                </select>
            </h1>
            <img class="main-img team1" src="images/badges/@Team1.ImageName" alt="picture of shield" />
            <img class="main-img team2" src="images/badges/@Team2.ImageName" alt="picture of shield" />
            <p class="tagline">@tagLine</p>
        </div>
    </section>

    <HeadToHeadSection Team1Name="Team1" Team2Name="Team2" />
    <LeagueSection Team1Name="Team1" Team2Name="Team2" />
    <LeagueCupSection Team1Name="Team1" Team2Name="Team2" />
    <FaCupSection Team1Name="Team1" Team2Name="Team2" />
}

@code {

    public TeamName Team1 { get; set; }
    public TeamName Team2 { get; set; }

    public string Team1Name
    {
        get => Team1?.MainName ?? teams.SheffUtd.MainName;
        set
        {
            if (Team1.MainName != value)
            {
                Team1 = teams.SingleOrDefault(x => x.MainName == value);
                LoadData();
            }
        }
    }

    public string Team2Name
    {
        get => Team2?.MainName  ?? teams.SheffWeds.MainName;
        set
        {
            if (Team2?.MainName != value)
            {
                Team2 = teams.SingleOrDefault(x => x.MainName == value);
                LoadData();
            }
        }
    }

    string tagLine => TagGenerator.ForTeams(Team1, Team2);

    private readonly Teams teams = new Teams();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Team1Name = (Team1 = teams.SheffUtd).MainName;
            Team2Name = (Team2 = teams.SheffWeds).MainName;
            StateHasChanged();
        }
    }

    async Task LoadData()
    {
        await JsRuntime.InvokeVoidAsync("setbackground", Team1.BackGroundName);
    }
}

