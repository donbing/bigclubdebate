@page "/"

@using BigClubDebate.Web.Pages;
@using BigClubDebate.Data

@inject BigClubDebate.Web.Data.WeatherForecastService ForecastService
@inject IJSRuntime JSRuntime

@if (div1 == default)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="background">
        <section class="masthead fw-block" style="margin-top: 82px;">
            <div class="container">
                <p>a statistics website to determine, once and for all who is the bigger club</p>
                <br />
                <h1>
                    <select id="team1Select" @bind="team1Name">
                        @foreach (var team in teams.ToList())
                        {
                            <option value="@team.MainName" disabled="@(team2Name == team.MainName)">@team.SlangName</option>
                        }
                    </select>
                    <span>VS</span>
                    <select id="team2Select" @bind="team2Name">
                        @foreach (var team in teams.ToList())
                        {
                            <option value="@team.MainName" disabled="@(team1Name == team.MainName)">@team.SlangName</option>
                        }
                    </select>
                </h1>
                <img class="main-img team1" src="images/@team1.ImageName" alt="@team1.MainName Logo" />
                <img class="main-img team2" src="images/@team2.ImageName" alt="@team2.MainName Logo" />
                <p class="tagline">@tagLine</p>
            </div>
        </section>

        <StatsSection SectionName="Head to Head" Expandable="false" Team1="head2head.Item1" Team2="head2head.Item2">
            <GameResults Team1="head2head.Item1" Team2="head2head.Item2">
                <p>League Games</p>
            </GameResults>
        </StatsSection>

        <StatsSection SectionName="Division 1 / Premiership" Team1="div1.Item1" Team2="div1.Item2">
            <CompetitionResults Team1="div1.Item1" Team2="div1.Item2">
                @*<ul class="middle_opts">
                        <li><a title="Players" href="#playersModal"><img width="40px" src="images/player.png" /><div class="extraStats">foo</div></a></li>
                        <li><a title="League Positions"><img width="40px" src="images/graph.png" title="League Positions" /></a></li>
                        <li><a title="Transfers"><img width="40px" src="images/transfer.png" title="Transfers" /></a></li>
                    </ul>*@
            </CompetitionResults>
            <GameResults Team1="div1.Item1" Team2="div1.Item2"></GameResults>
            <GoalResults Team1="div1.Item1" Team2="div1.Item2"></GoalResults>
        </StatsSection>

        <StatsSection SectionName="FA Cup" Team1="faCup.Item1" Team2="faCup.Item2">
            <CompetitionResults Team1="faCup.Item1" Team2="faCup.Item2"></CompetitionResults>
            <GameResults Team1="faCup.Item1" Team2="faCup.Item2"></GameResults>
            <GoalResults Team1="faCup.Item1" Team2="faCup.Item2"></GoalResults>
        </StatsSection>

        <StatsSection SectionName="League Cup" Team1="leagueCup.Item1" Team2="leagueCup.Item2">
            <CompetitionResults Team1="leagueCup.Item1" Team2="leagueCup.Item2"></CompetitionResults>
            <GameResults Team1="leagueCup.Item1" Team2="leagueCup.Item2"></GameResults>
            <GoalResults Team1="leagueCup.Item1" Team2="leagueCup.Item2"></GoalResults>
        </StatsSection>
    </div>
}

@code {

    string t1, t2;
    string team1Name { get => t1; set { t1 = value; LoadData(); } }
    string team2Name { get => t2; set { t2 = value; LoadData(); } }

    TeamName team1;
    TeamName team2;


    string tagLine = "The steel city derby";

    (TeamStats, TeamStats) faCup { get; set; }
    (TeamStats, TeamStats) div1 { get; set; }
    (TeamStats, TeamStats) head2head { get; set; }
    (TeamStats, TeamStats) leagueCup { get; set; }

    int divisionNumber = 1;
    private readonly Teams teams = new Teams();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            team1 = teams.team5;
            team1Name = team1.MainName;
            team2 = teams.team6;
            team2Name = team2.MainName;
            await LoadData();
            StateHasChanged();
        }
    }

    async Task LoadData()
    {
        team1 = teams.SingleOrDefault(x => x.MainName == team1Name);
        team2 = teams.SingleOrDefault(x => x.MainName == team2Name);

        div1 = await ForecastService.GetDivision(divisionNumber, team1, team2);
        head2head = await ForecastService.HeadToHead(team1, team2);
        faCup = await ForecastService.FaCup(team1, team2);
        leagueCup = await ForecastService.LeagueCup(team1, team2);

        await JSRuntime.InvokeVoidAsync("setbackground", team1.BackGroundName);
    }

}

